/*
    Pelajaran Pertama: Pendeklarasian Variabel 
    Sass mempunyai fitur variabel yang membuat kita dapat menyimpan value sama seperti b.pemrog seperti c++, python, java dan lainya. 
    Cara mendeklarasikanya juga mudah, yaitu dengan menggunakan tanda $ lalu diikuti dengan nama variabel.
*/
body {
  background-color: #666;
}
body h1 {
  color: red;
}

/*
    Pelajaran Kedua: Scope Variabel
    Di sini kita akan belajar tentang ruang lingkup/scope dari variabel tsb.

    Ada dua tipe scope variabel yaitu global scope dan local scope.
    - Global: dapat diakses dimanapun 
    - Local: hanya dapat diakses di dalam curly brackets tempat dia dideklarasikan.   
*/
/*
    Pelajaran Ketiga: Jenis Jenis value pada variabel

    Berikut adalah beberapa jenis value yang dapat digunakan ketika kita mendeklarasikan variabel:

    - angka/number
        => 14px | 14em | 100vh | dll
    - string
        => 'Arial'
    - color
        => red | blue | pink | green
    - map bisa juga disebut array asosiatif jika pada php atau object pada javascript
        => $map = (
            'danger': red,
            'primary': blue,
            'warning': yellow
        )
    - list, kita dapat memisahkan setiap value menggunakan spasi atau koma atau bisa juga dengan slash
        => 10px 20px 30px 40px | 10px, 20px, 30px, 40px | 10px/20px/30px/40px
*/
/*
    Pelajaran Keempat: Nesting

    Nesting adalah sebuah ekspresi memberi style pada child element di dalam curly brackets parent element. (Ya begitulah wkwk)
    Daripada bingung, mending cek contohnya aja dibawah

    Ketika menggunakan nesting, kita dapat menggunakan symbol & yang melambangkan parent selector nya.
*/
.card {
  width: 100px;
  height: 400px;
}
.card-header {
  background-color: #666;
  height: 100px;
  width: 100%;
}
.card-body {
  border-radius: 5px;
}

/*
    Pelajaran Kelima: Membuat partials pada Sass dan use 

    Partial pada Sass digunakan untuk menuliskan kode kode style yang nanti akan di import di bagian utama file Sass. Ini digunakan agar hierarki project Sass kita lebih modular.
    Cara membuat file partials adalah dengan didahului _ lalu diikuti dengan nama file, contoh _button.scss atau _library.scss

    Dengan menambahkan _ pada awal file, kita memberitahu compiler sass bahwa file tsb adalah partials sehingga tidak perlu di compile.

    Lalu use, keyword use digunakan untuk meng-import kode style dari file lain. Dengan itu, kita dapat menggunakan selector - selector yang dideklarasikan pada file yang kita import.
    Cara menggunakan keyword use adalah: 

    @use 'nama-file';

    Disini kita juga dapat meng-override variabel yang dideklarasikan di file yang kita import. Cara menggunakannya adalah sebagai berikut: 
    @use 'nama-file' with (
        $nama-var: value-baru
    )

    Perlu diingat, jika kita ingin meng-override variabel di dalam keyword with, maka variabel asal harus memakai keyword !default yang artinya variabel tsb dapat di override.

    NB: Ketika kita meng-import file partials Sass, kita hanya perlu menuliskan nama file nya saja tanpa tanda _ . 
*/
/*
    Pelajaran Keenam: Modules

    Ketika kita meng-import kode style dari file lain menggunakan keyword use, dan terdapat variabel pada file yang kita import, kita tidak bisa langsung mengaksesnya dengan hanya memanggil namanya. 

    Namun, kita dapat mengaksesnya dengan menggunakan keyword:
    nama-file.nama-var.

    Fitur ini sangat memudahkan kita untuk me-maintain kode Sass kita.
*/
/*
    Pelajaran ketujuh: Mixin

    Di bahasa pemrograman lain, kita mengenal istilah function yang gunanya untuk menyimpan sekumpulan blok kode yang akan dijalankan ketika function tsb dipanggil. Sifat Mixin juga seperti itu, namun Mixin menyimpan sekumpulan style style yang nanti akan diterapkan terhadap selector yang memanggil nya.

    Pertama tama kita ketahui dulu cara mendeklarasikan mixin:
    @mixin nama-mixin(parameter...) {
        sekumpulan style
    }

    Lalu kita ketahui cara memanggil mixin yang sudah kita deklarasikan:
    @include nama-mixin(letakan parameter disini jika dibutuhkan);

    Mixin mempunyai sifat yang hampir sama dengan function pada umumnya yaitu dapat dipanggil dan memiliki fitur nilai default pada parameter.
*/
.card {
  width: 400px;
  height: 400px;
  background-color: blue;
  border-radius: 3px;
}

/*
    Pelajaran Kedelapan: Extend / Inheritance pada Sass

    Inheritance adalah proses penurunan dari parent ke child. Di Sass, kita dapat menurunkan property dari 1 selector ke selector yang lain.

    Selector yang dijadikan parent, bisa diawali dengan tanda % lalu diikuti dengan nama selector tsb atau sebuah selector biasa juga boleh 
    %parent-selector {
        masukan style
    }

    Cara extend parent class yang sudah didefinisikan juga sangat mudah sekali, yaitu dengan menggunakan keyword @extend lalu diikuti dengan nama parent selector 
    .child-selector {
        @extend %parent-selector;
        masukan style
    }

    Perbedaan mixin dan extend:
    - mixin: style yang dihasilkan mixin adalah berulang, contohnya:
    .btn-success {
        padding: 20px 25px;
        transition: all .5s;
        color: white;
        background-color: green;
    }
    .btn-yellow {
        padding: 20px 25px;
        transition: all .5s;
        color: white;
        background-color: warning;
    }
    - extend: sedangkan style yang dihasilkan oleh extend / inheritance adalah:
    .btn-success, .btn-yellow {
        padding: 20px 25px;
        transition: all .5s;
        color: white;
    }
    .btn-succes {
        background-color: green;
    }
    .btn-warning {
        background-color: yellow;
    }
*/
.btn-warning, .btn-success {
  padding: 10px 15px;
  transition: all 0.5s;
  color: white;
  border-radius: 20px;
  border: none;
  cursor: pointer;
}
.btn-warning:hover, .btn-success:hover {
  box-shadow: 2px 6px rgba(0, 0, 0, 0.2);
}

.btn-success {
  background-color: #00cc00;
}

.btn-warning {
  background-color: yellow;
  color: black;
}

/*
    Pelajaran Kesembilan: Property Nesting

    Nesting tidak hanya dapat digunakan pada selector CSS saja, namun property juga dapat menggunakan fitur nesting inii.. 
    Lah bagaimana cara kerja nya itu mas?

    Jadi gini, kan ada property di CSS yang prefix (awalanya) itu sama, seperti: 
    border-width, border-color, border-style, border-radius..
    atau
    font-family, font-size, font-weight

    Nah kita bisa menulis property tsb di Sass dengan cara:
*/
.nesting-prop {
  font-family: "Times New Roman";
  font-size: 20px;
  font-weight: bold;
  border-style: solid;
  border-color: black;
  border-width: 5px;
}

/*
    Pelajaran Kesepuluh: Interpolation

    Ketika kita ingin memberi nilai custom property dengan nilai variabel yang kita buat di Sass secara literal/langsung, maka compiler Sass tidak akan bisa memprosesnya. 
    Maksudnya kak? ok, ok sini aku jelasin

    Kode SASS:
    $primary: blue;
    --primary: $primary;

    Kode CSS:
    --primary: $primary;

    Nah tau kan errornya dimana, 
    iyaa, nilai variabel nya engga dicompile alias masih original..

    bagaimana cara mengatasi masalah ini kak?
    Yaitu dengan menggunakan interpolation. 
    Pola interpolation pada Sass adalah dengan mengapit nilai variabel ke dalam ekspresi:
    variabel
*/
:root {
  --primary: blue;
}

/*
    Pelajaran Kesebelas: Conditional Property

    Kita dapat menggunakan keyword if sederhana di Sass, fungsi nya adalah merender value jika syarat yang kita sebutkan terpenuhi/bernilai true.
*/
.btn {
  color: green;
}

/*
    Pelajaran Keduabelas: Parent Selector

    Ketika kita menggunakan Sass, kita dapat menggunakan selector khusus yang bernama parent selector, yang dilambangkan dengan tanda & .

    Tapi apakah kamu tahu & itu merujuk ke mana?

    .card {
        &:hover {} | tanda & akan merujuk ke selector .card

        .card-body {
            &:hover {} | tanda & akan merujuk ke selector .card-body
        }
    }

    Apa yang bisa kita ambil dari contoh diatas? 
    => selector & akan mengarah pada parent elementnya secara langsung, jika dia di deklarasikan di dalam curly brackets nya selector .card, ya dia merujuk ke selector .card dan seterusnya
*/
/*
    Pelajaran Ketigabelas: Tipe Data Map pada Sass

    Tipe data Map sama seperti array asosiatif pada PHP atau object pada Javascript. Yaitu sebuah tipe data yang dapat menampung banyak nilai yang nilai tersebut bentuknya adalah key-value.

    Di Sass, terdapat keyword @each yang fungsinya sama seperti forEach pada b.pemrog Javascript. yaitu melooping elemen array. 
    Gas kita cobaa
*/
.btn-warning {
  background-color: yellow;
}

.btn-danger {
  background-color: red;
}

.btn-primary {
  background-color: blue;
}

.btn-warning {
  background-color: yellow;
}

.btn-danger {
  background-color: red;
}

.btn-primary {
  background-color: blue;
}

/*
    Pelajaran Keempatbelas: Function pada Sass

    Berbeda dengan mixin yang hanya bisa berisi style CSS saja, function pada Sass terdapat fitur mengembalikan nilai, sehingga terlihat seperti function yang ada di b.pemrograman lain.

    Function pada Sass dibedakan menjadi dua yaitu: 
    - function built-in, yaitu adalah fungsi yang sudah di deklarasikan ke dalam sistem Sassnya sehingga kita tinggal memanggilnya saja / meng-import nya dari file Sass tertentu.
    contohnya adalah: rgba(), lighten(), darken() dan dsb
    - function sendiri, yaitu kita sebagai developer yang membuat function Sass secara mandiri.
*/
/*
    Pelajaran Kelimabelas | Terakhir: Sass Production
*/

/*# sourceMappingURL=style.css.map */
